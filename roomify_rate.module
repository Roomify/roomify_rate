<?php

/**
 * @file
 */

/**
 * Implements hook_entity_info().
 */
function roomify_rate_entity_info() {
  $return['roomify_rate'] = array(
    'label' => t('Roomify Rate'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class' => 'RoomifyRate',
    'controller class' => 'RoomifyRateController',
    'base table' => 'roomify_rates',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'rate_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    // Bundles are defined by the rate bundles below.
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle
    // objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'roomify_rate_create',
    'access callback' => 'roomify_rate_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'roomify_rate_access',
    ),
    'permission labels' => array(
      'singular' => t('rate'),
      'plural' => t('rates'),
    ),
    'module' => 'roomify_rate',
    // The information below is used by the RoomifyRateUIController (which extends
    // the EntityDefaultUIController).
    'admin ui' => array(
      'path' => 'admin/bat/config/rate',
      'file' => 'roomify_rate.admin.inc',
      'controller class' => 'RoomifyRateUIController',
      'menu wildcard' => '%roomify_rate',
    ),
    'translation' => array(
      'entity_translation' => array(
        'base path' => 'admin/bat/config/rate/%roomify_rate',
        'default settings' => array(
          'default_language' => LANGUAGE_NONE,
          'hide_language_selector' => FALSE,
        ),
      ),
    ),
  );

  $return['roomify_rate_type'] = array(
    'label' => t('Roomify Rate Type'),
    'entity class' => 'RoomifyRateType',
    'controller class' => 'RoomifyRateTypeController',
    'base table' => 'roomify_rate_types',
    'fieldable' => TRUE,
    'bundle of' => 'roomify_rate',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'roomify_rate_type_access',
    'module' => 'roomify_rate',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/bat/config/rate-types',
      'file' => 'roomify_rate_type.admin.inc',
      'controller class' => 'RoomifyRateTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_bat_event_target_entity_types()
 *
 * Register Roomify Rate as a BAT event target entity type.
 */
function roomify_rate_bat_event_target_entity_types() {
  return (array('roomify_rate'));
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the rate types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 */
function roomify_rate_entity_info_alter(&$entity_info) {
  foreach (roomify_rate_get_types() as $type => $info) {
    $entity_info['roomify_rate']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/bat/config/rate-types/manage/%roomify_rate_type',
        'real path' => 'admin/bat/config/rate-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('bypass roomify_rate entities access'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function roomify_rate_permission() {
  $permissions = array();

  // Permission for Roomify Rate Types.
  $permissions += array(
    'administer roomify_rate_type entities' => array(
      'title' => t('Administer rate types'),
      'description' => t('Allows users to add rate types and configure their fields.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += bat_entity_access_permissions('roomify_rate');

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function roomify_rate_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_rate') . '/views',
  );
}

/**
 * Determines whether the given user has access to a rate.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param RoomifyRate $rate
 *   Optionally a rate to check access for. If nothing is
 *   given, access for all rates is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function roomify_rate_access($op, $rate = NULL, $account = NULL) {
  return bat_entity_access($op, $rate, $account, 'roomify_rate');
}

/**
 * Access callback: Checks whether the user has permission to add a rate.
 *
 * @return bool
 *   TRUE if the user has add permission, otherwise FALSE.
 */
function roomify_rate_add_access() {
  if (user_access('administer roomify_rate_type entities')) {
    return TRUE;
  }

  $bundles = roomify_rate_get_types();
  foreach ($bundles as $bundle) {
    if (roomify_rate_access('create', roomify_rate_create(array('type' => $bundle->type, 'uid' => 0)))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * The class used for rate entities
 */
class RoomifyRate extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_rate');
  }

  /**
   * {@inheritdoc}
   */
  protected function defaultLabel() {
    return $this->name;
  }

  /**
   * @param $event_type
   *
   * @return mixed
   */
  public function getEventDefaultValue($event_type) {
    $default_value = isset($this->rate_default_rate[LANGUAGE_NONE][0]['amount']) ? $this->rate_default_rate[LANGUAGE_NONE][0]['amount'] : 0;
    return $default_value;
  }

  /**
   * @param $event_type
   * @param $value
   *
   * @return mixed
   */
  public function formatEventValue($event_type, $value) {
    $field = 'rate_default_rate';
    $field_info = field_info_field($field);
    $field_info_instance = field_info_instance('roomify_rate', $field, $this->type);

    if ($field_info['type'] == 'commerce_price') {
      if (empty($field_info_instance['widget']['settings']['currency_code']) ||
          $field_info_instance['widget']['settings']['currency_code'] == 'default') {
        $currency_code = NULL;
      }
      else {
        $currency_code = $field_info_instance['widget']['settings']['currency_code'];
      }

      $price = array(
        'amount' => $value,
        'currency_code' => $currency_code,
      );
      $field_view_value = field_view_value('roomify_rate', $this, $field, $price);
    }
    else {
      $field_view_value = field_view_value('roomify_rate', $this, $field, $value);
    }

    return $field_view_value['#markup'];
  }

}

/**
 * The class used for rate type entities
 */
class RoomifyRateType extends Entity {

  /**
   * The rate type.
   *
   * @var string
   */
  public $type;

  /**
   * The rate type label.
   *
   * @var string
   */
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_rate_type');
  }

}

/**
 * The Controller for RoomifyRate entities
 */
class RoomifyRateController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'rate_id' => '',
      'is_new' => TRUE,
      'data' => '',
      'name' => '',
      'created' => '',
    );

    $rate = parent::create($values);

    return $rate;
  }

  public function getReferencedIds($unit_type, $ids = array()) {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'roomify_rate')
          ->fieldCondition('rate_bat_type_reference', 'target_id', $unit_type);
    if (!empty($ids)) {
      $query->propertyCondition('rate_id', $ids, 'IN');
    }
    $result = $query->execute();

    $rates = array();
    if (isset($result['roomify_rate'])) {
      foreach ($result['roomify_rate'] as $rate) {
        $roomify_rate = roomify_rate_load($rate->rate_id);

        $rates[] = array(
          'id' => $roomify_rate->rate_id,
          'name' => $roomify_rate->name,
          'type_id' => $unit_type,
        );
      }
    }

    return $rates;
  }

  /**
   * Overriding the buildContent function to add entity specific fields.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    return $content;
  }

}

/**
 * The Controller for RoomifyRateType entities
 */
class RoomifyRateTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );

    $rate_type = parent::create($values);

    return $rate_type;
  }

}

function roomify_rate_type_access() {
  return TRUE;
}

/**
 * Create a rate object.
 */
function roomify_rate_create($values = array()) {
  return entity_get_controller('roomify_rate')->create($values);
}

/**
 * Create a rate type object.
 */
function roomify_rate_type_create($values = array()) {
  return entity_get_controller('roomify_rate_type')->create($values);
}

/**
 * Menu argument loader; Load a rate type by string.
 *
 * @param $type
 *   The machine-readable name of a rate type to load.
 * @param bool $reset
 *   A boolean indicating whether the internal cache should be reset.
 *
 * @return array|false
 *   A rate type array or FALSE if $type does not exist.
 */
function roomify_rate_type_load($type, $reset = FALSE) {
  return roomify_rate_get_types($type, $reset);
}

/**
 * Gets an array of all rate types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return RoomifyRateType[]
 *   Depending whether $type isset, an array of rate types or a single one.
 */
function roomify_rate_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load() will get the Entity controller for our rate type
  // entity and call the load function of that object.
  $types = entity_load_multiple_by_name('roomify_rate_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Saves a rate type to the db.
 *
 * @param RoomifyRateType $rate_type
 *   The rate type to save.
 */
function roomify_rate_type_save(RoomifyRateType $rate_type) {
  $rate_type->save();
}

/**
 * Deletes a rate type from the db.
 */
function roomify_rate_type_delete(RoomifyRateType $bundle) {
  $bundle->delete();
}

/**
 * Fetches a rate object.
 *
 * @param int $rate_id
 *   Integer specifying the rate id.
 * @param bool $reset
 *   A boolean indicating whether the internal cache should be reset.
 *
 * @return RoomifyRate|false
 *   A fully-loaded $rate object or FALSE if it cannot be loaded.
 *
 * @see roomify_rate_load_multiple()
 */
function roomify_rate_load($rate_id, $reset = FALSE) {
  $rates = roomify_rate_load_multiple(array($rate_id), array(), $reset);
  return reset($rates);
}

/**
 * Loads multiple rates based on certain conditions.
 *
 * @param array $rate_ids
 *   An array of rate IDs.
 * @param array $conditions
 *   An array of conditions to match against the {roomify_rates} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of rate objects, indexed by rate_id.
 *
 * @see entity_load()
 * @see roomify_rate_load()
 */
function roomify_rate_load_multiple($rate_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('roomify_rate', $rate_ids, $conditions, $reset);
}

/**
 * Deletes a rate from the db.
 */
function roomify_rate_delete(RoomifyRate $rate) {
  $rate->delete();
}

/**
 * Implements hook_theme().
 */
function roomify_rate_theme() {
  return array(
    'roomify_rate_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'roomify_rate.admin.inc',
    ),
  );
}

/**
 * Implements hook_entity_insert().
 */
function roomify_rate_entity_insert($entity, $type) {
  if ($type == 'roomify_rate_type') {
    module_load_include('inc', 'roomify_rate', 'roomify_rate.fields');

    roomify_rate_add_default_rate_field($entity->type);
    roomify_rate_add_event_type_reference_field($entity->type);
    roomify_rate_add_bat_type_reference_field($entity->type);
    roomify_rate_add_minimum_stay_field($entity->type);
    roomify_rate_add_maximum_stay_field($entity->type);
    roomify_rate_add_closed_on_arrival_field($entity->type);
    roomify_rate_add_closed_on_departure_field($entity->type);
    roomify_rate_add_add_valid_from_field($entity->type);
    roomify_rate_add_add_valid_to_field($entity->type);
  }
}

/**
 * @param $type_id
 * @param $nights
 *
 * @return RoomifyRate|false
 */
function roomify_rate_get_rate($type_id, $nights) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'roomify_rate')
        ->fieldCondition('rate_bat_type_reference', 'target_id', $type_id);

  $result = $query->execute();

  $min_stay = 1;
  $max_stay = PHP_INT_MAX;
  $current_rate = FALSE;
  if (isset($result['roomify_rate'])) {
    foreach ($result['roomify_rate'] as $rate) {
      $rate = roomify_rate_load($rate->rate_id);

      $min = (isset($rate->rate_minimum_stay[LANGUAGE_NONE][0]['value'])) ? $rate->rate_minimum_stay[LANGUAGE_NONE][0]['value'] : 1;
      $max = (isset($rate->rate_maximum_stay[LANGUAGE_NONE][0]['value'])) ? $rate->rate_maximum_stay[LANGUAGE_NONE][0]['value'] : PHP_INT_MAX;

      if ($nights >= $min && $nights <= $max && $min >= $min_stay) {
        $current_rate = $rate;
        $min_stay = $min;
        $max_stay = $max;
      }
    }
  }

  return $current_rate;
}
